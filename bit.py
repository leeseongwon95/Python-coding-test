################################ 비트시프트 연산 ################################
 
# 비트의 위치를 이동시키는 연산
# 곱하기, 나누기보다 쉬프트 연산이 빠를 때 종종 사용됨
# << : 각 비트를 왼쪽으로 옮긴다 (*2)와 같음
# >> : 각 비트를 오른쪽으로 옮긴다 (/2) 와 같음
# python 에서는 실수 (float) 에 대한 비트 연산자는 허용되지 않고 오류가 발생한다. (본래 실수 값도 동일하게 컴퓨터 내부적으로 2진수 형태로 저장된다.)
# 1을 3번만큼 밀게되면 (1<<3), 1(2) -> 1000(2) 가 된다

# 10 = 1010(2)
# n << 1 = 10100(2), n >> 1 = 101(2)
n = 10

print(n<<1, n>>1)
# 10 , 20

################################################################################

################################ 논리연산자 ################################

# 기준: bool(True, False)

# 모두 True일 때만 True출력(a and b)
# 서로 다를 때에만 True 출력(a ^ b, XOR)
# 서로 같을때에만 True 출력(a == b, a == True and b == True)
# 모두 False일 때 True 출력(not(a or b), a == False and b == False)


a = 1
b = 0
# 1. AND(&)
print(bool(int(a)) and bool(int(b)))

# 2. XOR(^)
print(a ^ b)

# 3. ==
print(a == True and b == True)

# 4. not, or
print(a == False and b == False)





################################################################################

################################ 3개의 수 비교 ################################

# 변수 a, b, c가 주어졌을 때 이 중 제일 큰 값을 찾기위해서는 다음과 같은 조건이 있다.

# 1. a와 b를 비교했을 때 더 큰 값을 c와 비교한다.
# 2. a와 c를 비교했을 때 더 큰 값을 b와 비교한다.
# 3. b와 c를 비교했을 때 더 큰 값을 a와 비교한다.
# 제일 작은 값을 찾기위한 방법은 위 과정의 대소관계를 반대로 실행하면 된다.

# 1. a와 b를 비교했을 때 더 작은 값을 c와 비교한다.
# 2. a와 c를 비교했을 때 더 작은 값을 b와 비교한다.
# 3. b와 c를 비교했을 때 더 작은 값을 a와 비교한다.

a = 1
b = 2
c = 3

# 1. 제일 큰 값 찾기

print((a if a > b else b) if (a if a > b else b) > c else c)

# 2. 제일 작은 값 찾기
print((a if a < b else b) if (a if a < b else b) < c else c)

################################ 비트 단위 논리 연산 ################################

# 1. 4bytes -> 32bits
# 2. 부호비트가 양수(0)일 때 최대값 표현은 2^31 -1 만큼
# 3. 부호비트가 음수(1)일 때 최대값 표현은 2^31 만큼
# 4. 1byte 기준: -1은 음의 정수 중 가장 큰 값이므로 이진표현에서도 가장 큰값(1111), 음의 정수 중 가장 작은값은 이진표현의 가장 작은 값 -8(1000)
# 5. 32 비트형의 정수 0은 0*32, 그리고 -1은 0에서 1을 더 빼고 32비트만 표시하는 형태이므로 1*32, -2는 여기서 1만 더 빼면된다 1*31,0
# 6. ~n = -n-1 => ~n = -(n+1)
# 7.비트단위 연산은 빠른 계산이 필요한 그래픽처리에서 마스크연산(특정 부분을 가리고 출력하는)을 수행하는 데에도 효과적으로 사용된다.
# 8.비트단위 연산(^,XOR)은 두 장의 이미지를 겹쳤을 때 색이 서로 다른 부분만 처리할 수 있다.(배경이 되는 그림과 배경 위에서 움직이는 그림이 있을 때, 차이점 확인가능)
# 9.네트워크에 연결되어 있는 두 개의 컴퓨터가 데이터를 주고받기 위해 같은 네트워크에 있는지 아닌지를 판단할 때 bitwise 연산자 &를 사용하면 된다.
# A = 192.168.0.31 : 11000000.10101000.00000000.00011111
# B = 255.255.255.0 : 11111111.11111111.11111111.00000000

# reference : 비트연산 완전정복 - 엔지니어 대한민국 (YOUTUBE)

################################ 핵심 문제 ################################

# 1. 월 입력받아 계절 출력

# 주어진 월을 입력받으면 어떤 계절인지 출력하는 문제인데, 본래 범위로 구현 (3 <= ㅜ <= 5:print('spring))하려 했으나, 해당수를 3으로 나눴을 때 몫이 얼마인지에 따라 구분이 가능하다는 것이 신기

n = int(input())

# 3, 4 ,5월
if n//3 == 1:
    print('spring')

# 6, 7, 8월
elif n//3 == 2:
    print('summer')

# 9, 10, 11월
elif n//3 == 3:
    print('fall')

# 12, 1, 2월
else:
    print('winter')

# 2. 0이 입력 될 때까지 무한 출력하기

# while 문을 써서 0이 입력 됐을 때 종료하는 문제 인데 사용 가능한 방법이 많음

# 1번

while True:
    n = int(input())
    if n == 0:
        break
    else:
        print(n)

# 2번
n = 1
while n != 0:
    n = int(input())
    if n == 0:
        break
    print(n)

# 3번

n= 1
while n != 0:
    n = int(input())
    if n != 0:
        print(n)